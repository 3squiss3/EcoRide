generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  username          String           @unique
  email             String           @unique
  password          String
  credits           Int              @default(20)
  isDriver          Boolean          @default(false)
  isPassenger       Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  driverProfile     DriverProfile?
  driverRides       Ride[]           @relation("DriverRides")
  passengerRides    PassengerRide[]
  reviews           Review[]         @relation("ReceivedReviews")
  givenReviews      Review[]         @relation("GivenReviews")
  suspendedUntil    DateTime?
  role              UserRole         @default(USER)
}

model DriverProfile {
  id              Int              @id @default(autoincrement())
  userId          Int              @unique
  user            User             @relation(fields: [userId], references: [id])
  vehicles        Vehicle[]
  preferences     DriverPreference?
  rating          Float            @default(0)
  reviewCount     Int              @default(0)
}

model Vehicle {
  id                Int              @id @default(autoincrement())
  licensePlate      String
  brand             String
  model             String
  color             String
  registrationYear  Int
  seats             Int
  energy            String
  isElectric        Boolean
  driverProfileId   Int
  driverProfile     DriverProfile    @relation(fields: [driverProfileId], references: [id])
  rides             Ride[]
}

model DriverPreference {
  id                Int              @id @default(autoincrement())
  driverProfileId   Int              @unique
  driverProfile     DriverProfile    @relation(fields: [driverProfileId], references: [id])
  smoking           Boolean          @default(false)
  animals           Boolean          @default(false)
  music             String?
  conversation      String?
  otherPreferences  String?
}

model Ride {
  id                Int              @id @default(autoincrement())
  driverId          Int
  driver            User             @relation("DriverRides", fields: [driverId], references: [id])
  vehicleId         Int
  vehicle           Vehicle          @relation(fields: [vehicleId], references: [id])
  departureCity     String
  departureAddress  String
  arrivalCity       String
  arrivalAddress    String
  departureDate     DateTime
  departureTime     String
  arrivalTime       String
  seats             Int
  availableSeats    Int
  price             Int
  status            RideStatus       @default(PENDING)
  started           Boolean          @default(false)
  completed         Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  passengerRides    PassengerRide[]
}

model PassengerRide {
  id                Int              @id @default(autoincrement())
  passengerId       Int
  passenger         User             @relation(fields: [passengerId], references: [id])
  rideId            Int
  ride              Ride             @relation(fields: [rideId], references: [id])
  status            PassengerStatus  @default(CONFIRMED)
  reviewed          Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Review {
  id                Int              @id @default(autoincrement())
  giverId           Int
  giver             User             @relation("GivenReviews", fields: [giverId], references: [id])
  receiverId        Int
  receiver          User             @relation("ReceivedReviews", fields: [receiverId], references: [id])
  rating            Int
  comment           String?
  status            ReviewStatus     @default(PENDING)
  createdAt         DateTime         @default(now())
}

enum UserRole {
  USER
  EMPLOYEE
  ADMIN
}

enum RideStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PassengerStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  PROBLEM
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}